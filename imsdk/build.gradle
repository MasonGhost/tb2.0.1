apply plugin: 'com.android.library'
//apply plugin: 'jacoco' //测试报告
//apply from: "$rootDir/jacocoCoverage.gradle"

//jacoco {
//    toolVersion = "0.7.8"
//    reportsDir = file("$buildDir/customJacocoReportDir")
//}
android {
    def gConfig = rootProject.extensions.getByName("ext")
    compileSdkVersion gConfig["compileSdkVersion"]
    buildToolsVersion gConfig["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion gConfig["minSdkVersion"]
        targetSdkVersion gConfig["targetSdkVersion"]
        versionCode gConfig["versionCode"]
        versionName gConfig["versionName"]
        testInstrumentationRunner gConfig.testDependencies.androidJUnitRunner
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }


    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
        // if true, only report errors.
//        ignoreWarnings true
    }
    /**
     * 保证 testDebug 执行完成后会执行 testRelease
     * ｛@Link http://g.co/androidstudio/not-mocked｝
     *
     */
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-XX:MaxPermSize=256m'
            // resolve "Method ... not mocked."
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    def testDependences = rootProject.ext.testDependencies
    def dataDependences = rootProject.ext.dataDependencies
    def sdksoupportDependencies = rootProject.ext.sdksoupportDependencies
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile testDependences.junit

    compile sdksoupportDependencies.appcompatV7
    // Eventbus
    compile dataDependences.androideventbus
    compile dataDependences.gson

    testCompile testDependences.mockito
    androidTestCompile testDependences.junit
    androidTestCompile testDependences.mockito
    androidTestCompile testDependences.dexmaker
    androidTestCompile testDependences.dexmakerMockito
    compile files('libs/jackson-core-asl-1.9.7.jar')
    compile files('libs/jackson-mapper-asl-1.9.7.jar')
    compile dataDependences.rxJava
    compile dataDependences.rxAndroid
}

task jarMyLib(type: Jar, dependsOn: ['build']) {
    archiveName = 'imsdk1.1.5-beta-nop.jar'
    from('build/intermediates/classes/release')
    from(project.zipTree("libs/jackson-core-asl-1.9.7.jar")) // 添加这一行
    from(project.zipTree("libs/jackson-mapper-asl-1.9.7.jar")) // 添加这一行
    from(project.zipTree("libs/javassist-3.18.0-GA.jar")) // 添加这一行
    from(project.zipTree("libs/json-simple-1.1.1.jar")) // 添加这一行
    from(project.zipTree("libs/msgpack-0.6.12.jar")) // 添加这一行
    destinationDir = file('build/libs')
    exclude('com/zhiyicx/imsdk/BuildConfig.class')
    exclude('com/zhiyicx/imsdk/BuildConfig\$*.class')
    exclude('**/R.class')
    exclude('**/R\$*.class')
//    include('com/nought/hellolib/*.class')
//    include('com/xxx/*.class') // 同时记得加上第三方的package
}
//def androidSDKDir = plugins.getPlugin('com.android.library').sdkHandler.getSdkFolder()
//def androidJarDir = androidSDKDir.toString() + '/platforms/' + "android-16" + '/android.jar'

task proguardMyLib(type: proguard.gradle.ProGuardTask, dependsOn: ['jarMyLib']) {
    injars('build/libs/imsdk1.1.5-beta-nop.jar')
    outjars('build/libs/imsdk1.1.5-beta.jar')
//    libraryjars(androidJarDir)
    configuration 'proguard-rules.pro'
}
// 加快 gradle 编译
//android{
//    ...   tasks.whenTaskAdded { task ->
//        if (task.name.contains("lint")//如果instant run不生效，把clean这行干掉
//                ||task.name.equals("clean")//项目中有用到aidl则不可以舍弃这个任务
//                ||task.name.contains("Aidl")//用不到测试的时候就可以先关闭
//                ||task.name.contains("mockableAndroidJar")
//                ||task.name.contains("UnitTest")
//                ||task.name.contains("AndroidTest")//用不到NDK和JNI的也关闭掉
//                || task.name.contains("Ndk")
//                || task.name.contains("Jni")
//        ) {
//            task.enabled = false
//        }
//    }
//}